//
//  LQAccountDetailsView.m
//  朝阳能源结算
//
//  Created by admin on 15/8/11.
//  Copyright (c) 2015年 dieshang. All rights reserved.
//
//-------------------------------------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------
//-------------------户头详情界面的上半部分--------------------
//-------------------------------------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------

#import "LQAccountDetailsView.h"
#import "LQAccountItemModel.h"
#import "LQMeterDataModel.h"

@interface LQAccountDetailsView()<UIAlertViewDelegate>

/**
 *  分割线
 */
@property (nonatomic, weak) UIView *lineView;

/**
 *  冻结提示：“请柜台办理本账户相关业务”
 */
@property (nonatomic, weak) UILabel *frozenPromptLable;

/**
 *  当前示数
 */
@property (nonatomic, weak) UILabel *currentReadingsLable;

@property (nonatomic, weak) UIActivityIndicatorView *currentReadingsAct;

/**
 *  本月使用
 */
@property (nonatomic, weak) UILabel *monthUseLable;

/**
 *  本年累计
 */
@property (nonatomic, weak) UILabel *yearCumulativeLable;

/**
 *  表具编号
 */
@property (nonatomic, weak) UILabel *meterNumberLable;

/**
 *  表具型号
 */
//@property (nonatomic, weak) UILabel *meterModelLable;

/**
 *  安装地址
 */
@property (nonatomic, weak) UILabel *installationAddressLable;

/**
 *  剩余用量
 */
@property (nonatomic, weak) UILabel *surplusAmountLable;
@property (nonatomic, weak) UILabel *remainingAmountNameLable;

@end


@implementation LQAccountDetailsView

- (UILabel *)nameLable
{
    if (_nameLable == nil)
    {
        UILabel *lable = [[UILabel alloc] init];
        lable.font = [UIFont boldSystemFontOfSize:16];
        lable.textColor = [UIColor blackColor];
        [self addSubview:lable];
        
        [lable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.mas_left).with.offset(15);
            make.top.equalTo(self.mas_top).with.offset(0);
            make.bottom.equalTo(self.lineView.mas_top).with.offset(0);
            make.width.equalTo(@110);
        }];
        
        _nameLable = lable;
    }
    
    return _nameLable;
}

- (UILabel *)accountStateLable
{
    if (_accountStateLable == nil)
    {
        UILabel *lable = [[UILabel alloc] init];
        lable.font = [UIFont systemFontOfSize:13];
        lable.textColor = [UIColor whiteColor];
        lable.textAlignment = NSTextAlignmentCenter;
        [self addSubview:lable];
        
        [lable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.nameLable.mas_right).with.offset(0);
            make.centerY.equalTo(self.nameLable.mas_centerY).with.offset(0);
            make.size.mas_equalTo(CGSizeMake(60, 20));
        }];
        
        _accountStateLable = lable;
    }
    
    return _accountStateLable;
}

- (UIButton *)rechargeButton
{
    if (_rechargeButton == nil)
    {
        UIButton *button = [[UIButton alloc] init];
        [button setTitle:@"充值" forState:UIControlStateNormal];
        [button setTitleColor:RGB(83, 146, 236) forState:UIControlStateNormal];
        button.titleLabel.font = [UIFont systemFontOfSize:15];
        [button addTarget:self action:@selector(recharge:) forControlEvents:UIControlEventTouchUpInside];
        button.hidden = YES;
        [self addSubview:button];
        button.layer.borderColor = button.titleLabel.textColor.CGColor;
        button.layer.borderWidth = 3.0;
        button.layer.cornerRadius = 5;
        
        [button mas_makeConstraints:^(MASConstraintMaker *make) {
            make.right.equalTo(self.mas_right).with.offset(-15);
            make.centerY.equalTo(self.nameLable.mas_centerY).with.offset(0);
            make.size.mas_equalTo(CGSizeMake(70, 30));
        }];
        
        _rechargeButton = button;
    }
    
    return _rechargeButton;
}

- (UILabel *)frozenPromptLable
{
    if (_frozenPromptLable == nil)
    {
        UILabel *lable = [[UILabel alloc] init];
        lable.font = [UIFont systemFontOfSize:13];
        lable.textAlignment = NSTextAlignmentRight;
        lable.text = @"请柜台办理相关业务";
        lable.hidden = YES;
        [self addSubview:lable];
        
        [lable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.right.equalTo(self.mas_right).with.offset(-10);
            make.centerY.equalTo(self.nameLable.mas_centerY).with.offset(0);
            make.size.mas_equalTo(CGSizeMake(180, 30));
        }];
        
        _frozenPromptLable = lable;
    }
    
    return _frozenPromptLable;
}

- (UILabel *)currentReadingsLable
{
    if (_currentReadingsLable == nil)
    {
        UILabel *nameLable = [[UILabel alloc] init];
        nameLable.font = [UIFont systemFontOfSize:13];
        nameLable.textAlignment = NSTextAlignmentLeft;
        nameLable.text = @"当前示数：";
        [self addSubview:nameLable];
        
        [nameLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.nameLable.mas_left).with.offset(0);
            make.top.equalTo(self.lineView.mas_bottom).with.offset(10);
            make.size.mas_equalTo(CGSizeMake(65, 13));
        }];
        
        UILabel *currentReadingsLable = [[UILabel alloc] init];
        currentReadingsLable.font = nameLable.font;
        currentReadingsLable.textAlignment = nameLable.textAlignment;
        [self addSubview:currentReadingsLable];
        
        [currentReadingsLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(nameLable.mas_right).with.offset(0);
            make.centerY.equalTo(nameLable.mas_centerY).with.offset(0);
            make.size.mas_equalTo(CGSizeMake(100, 13));
        }];
        
        _currentReadingsLable = currentReadingsLable;
    }
    
    return _currentReadingsLable;
}

- (UIActivityIndicatorView *)currentReadingsAct
{
    if (!_currentReadingsAct)
    {
        UIActivityIndicatorView *act = [[UIActivityIndicatorView alloc] init];
        [act startAnimating];
        [act setActivityIndicatorViewStyle:UIActivityIndicatorViewStyleGray];
        [self addSubview:act];
        
        [act mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.currentReadingsLable.mas_left).with.offset(0);
            make.centerY.equalTo(self.currentReadingsLable);
            make.size.mas_equalTo(CGSizeMake(30, 30));
        }];
        
        _currentReadingsAct = act;
    }
    
    return _currentReadingsAct;
}

- (UILabel *)monthUseLable
{
    if (_monthUseLable == nil)
    {
        UILabel *nameLable = [[UILabel alloc] init];
        nameLable.font = self.currentReadingsLable.font;
        nameLable.textAlignment = self.currentReadingsLable.textAlignment;
        nameLable.text = @"本月使用：";
        [self addSubview:nameLable];
        
        [nameLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.nameLable.mas_left).with.offset(0);
            make.top.equalTo(self.currentReadingsLable.mas_bottom).with.offset(10);
            make.size.mas_equalTo(CGSizeMake(65, 13));
        }];
        
        UILabel *monthUseLable = [[UILabel alloc] init];
        monthUseLable.font = nameLable.font;
        monthUseLable.textAlignment = nameLable.textAlignment;
        [self addSubview:monthUseLable];
        
        [monthUseLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(nameLable.mas_right).with.offset(0);
            make.centerY.equalTo(nameLable.mas_centerY).with.offset(0);
            make.size.mas_equalTo(CGSizeMake(100, 13));
        }];
        
        _monthUseLable = monthUseLable;
    }
    
    return _monthUseLable;
}

- (UILabel *)yearCumulativeLable
{
    if (_yearCumulativeLable == nil)
    {
        UILabel *nameLable = [[UILabel alloc] init];
        nameLable.font = self.currentReadingsLable.font;
        nameLable.textAlignment = self.currentReadingsLable.textAlignment;
        nameLable.text = @"本年累计：";
        [self addSubview:nameLable];
        
        [nameLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.nameLable.mas_left).with.offset(0);
            make.top.equalTo(self.monthUseLable.mas_bottom).with.offset(10);
            make.size.mas_equalTo(CGSizeMake(65, 13));
        }];
        
        UILabel *yearCumulativeLable = [[UILabel alloc] init];
        yearCumulativeLable.font = nameLable.font;
        yearCumulativeLable.textAlignment = nameLable.textAlignment;
        [self addSubview:yearCumulativeLable];
        
        [yearCumulativeLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(nameLable.mas_right).with.offset(0);
            make.centerY.equalTo(nameLable.mas_centerY).with.offset(0);
            make.size.mas_equalTo(CGSizeMake(100, 13));
        }];
        
        _yearCumulativeLable = yearCumulativeLable;
    }
    
    return _yearCumulativeLable;
}

- (UILabel *)meterNumberLable
{
    if (_meterNumberLable == nil)
    {
        UILabel *nameLable = [[UILabel alloc] init];
        nameLable.font = self.currentReadingsLable.font;
        nameLable.textAlignment = self.currentReadingsLable.textAlignment;
        nameLable.text = @"表具编号：";
        [self addSubview:nameLable];
        
        [nameLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.nameLable.mas_left).with.offset(0);
            make.top.equalTo(self.yearCumulativeLable.mas_bottom).with.offset(10);
            make.size.mas_equalTo(CGSizeMake(65, 13));
        }];
        
        UILabel *meterNumberLable = [[UILabel alloc] init];
        meterNumberLable.font = nameLable.font;
        meterNumberLable.textAlignment = nameLable.textAlignment;
        [self addSubview:meterNumberLable];
        
        [meterNumberLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(nameLable.mas_right).with.offset(0);
            make.centerY.equalTo(nameLable.mas_centerY).with.offset(0);
            make.right.equalTo(self.mas_right).with.offset(-20);
            make.height.mas_equalTo(13);
        }];
        
        _meterNumberLable = meterNumberLable;
    }
    
    return _meterNumberLable;
}

- (UILabel *)installationAddressLable
{
    if (_installationAddressLable == nil)
    {
        UILabel *nameLable = [[UILabel alloc] init];
        nameLable.font = self.currentReadingsLable.font;
        nameLable.textAlignment = self.currentReadingsLable.textAlignment;
        nameLable.text = @"安装地址：";
        [self addSubview:nameLable];
        
        [nameLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.nameLable.mas_left).with.offset(0);
            make.top.equalTo(self.meterNumberLable.mas_bottom).with.offset(10);
            make.size.mas_equalTo(CGSizeMake(65, 13));
        }];
        
        UILabel *installationAddressLable = [[UILabel alloc] init];
        installationAddressLable.font = nameLable.font;
        installationAddressLable.textAlignment = nameLable.textAlignment;
        [self addSubview:installationAddressLable];
        
        [installationAddressLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(nameLable.mas_right).with.offset(0);
            make.centerY.equalTo(nameLable.mas_centerY).with.offset(0);
            make.size.mas_equalTo(CGSizeMake(220, 13));
        }];
        
        _installationAddressLable = installationAddressLable;
    }
    
    return _installationAddressLable;
}

- (UILabel *)remainingAmountNameLable
{
    if (!_remainingAmountNameLable)
    {
        UILabel *nameLable = [[UILabel alloc] init];
        nameLable.font = [UIFont systemFontOfSize:13];
        nameLable.textAlignment = NSTextAlignmentRight;
        [self addSubview:nameLable];
        
        [nameLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.right.equalTo(self.rechargeButton.mas_right).with.offset(0);
            make.centerY.equalTo(self.currentReadingsLable.mas_centerY).with.offset(0);
            make.size.mas_equalTo(CGSizeMake(80, 13));
        }];
        
        _remainingAmountNameLable = nameLable;
    }
    
    return _remainingAmountNameLable;
}

- (UILabel *)surplusAmountLable
{
    if (_surplusAmountLable == nil)
    {
        UILabel *remainingAmountLable = [[UILabel alloc] init];
        remainingAmountLable.font = [UIFont boldSystemFontOfSize:25];
        remainingAmountLable.textAlignment = self.remainingAmountNameLable.textAlignment;
        [self addSubview:remainingAmountLable];
        
        [remainingAmountLable mas_makeConstraints:^(MASConstraintMaker *make) {
            make.right.equalTo(self.remainingAmountNameLable.mas_right).with.offset(0);
            make.top.equalTo(self.remainingAmountNameLable.mas_bottom).with.offset(10);
            make.size.mas_equalTo(CGSizeMake(150, 25));
        }];
        
        _surplusAmountLable = remainingAmountLable;
    }
    
    return _surplusAmountLable;
}

#pragma mark -
+ (instancetype)accountDetailsViewWithFrame:(CGRect)frame
{
    return [[self alloc] initWithFrame:frame];
}

- (instancetype)initWithFrame:(CGRect)frame
{
    if (self = [super initWithFrame:frame])
    {
        [self doLoading];
    }
    
    return self;
}

- (void)doLoading
{
    self.backgroundColor = RGB(245, 245, 245);
    
    UIView *lineView = [[UIView alloc] init];
    lineView.frame = CGRectMake(0, 45, CGRectGetWidth(self.frame), 1);
    lineView.backgroundColor = RGB(236, 236, 236);
    [self addSubview:lineView];
    self.lineView = lineView;

}

- (void)recharge:(UIButton *)btn
{
    if ([self.delegate respondsToSelector:@selector(accountDetailsViewDidClickRechargeButtonWith:)])
    {
        [self.delegate accountDetailsViewDidClickRechargeButtonWith:self];
    }
}

- (void)setAccountItemModel:(LQAccountItemModel *)accountItemModel
{
    _accountItemModel = accountItemModel;
    
    //先判断当前户头的状态是否冻结(1:未冻结; 2:已冻结),区分界面显示的颜色
    if (accountItemModel.isfreezes == 1)
    {
        NSArray *array = runStateArray;
        
        self.accountStateLable.text = array[accountItemModel.runstate-1];
        self.rechargeButton.hidden = NO;
        self.frozenPromptLable.hidden = YES;
        
        //除了“正常运行”字体显示黑色以外，其他都显示红色
        if (accountItemModel.runstate == 1)
        {
            self.accountStateLable.backgroundColor = RGB(108, 187, 156);
            self.surplusAmountLable.textColor = [UIColor blackColor];
        }
        else
        {
            self.accountStateLable.backgroundColor = RGB(206, 98, 84);
            self.surplusAmountLable.textColor = self.accountStateLable.backgroundColor;
        }
    }
    else
    {
        self.accountStateLable.backgroundColor = RGB(206, 98, 84);
        self.frozenPromptLable.textColor = self.accountStateLable.backgroundColor;
        self.accountStateLable.text = @"已冻结";
        self.surplusAmountLable.textColor = self.accountStateLable.backgroundColor;
        self.rechargeButton.hidden = YES;
        self.frozenPromptLable.hidden = NO;
    }
    
    self.nameLable.text = [NSString stringWithFormat:@"%@  %@",accountItemModel.etypename,accountItemModel.accountcode];
    self.monthUseLable.text = [NSString stringWithFormat:@"%@ %@",accountItemModel.monthrecvalues,accountItemModel.eunit];
    self.yearCumulativeLable.text = [NSString stringWithFormat:@"%@ %@",accountItemModel.yearrecvalues,accountItemModel.eunit];
    self.meterNumberLable.text = [NSString stringWithFormat:@"%@(%@)",accountItemModel.meterno,accountItemModel.metermodel];
    self.installationAddressLable.text = accountItemModel.linkaddress;
    
    //判断“当前示数”是否为nil
    if (accountItemModel.currentamount)
    {
        self.currentReadingsAct.hidden = YES;
        [self.currentReadingsAct stopAnimating];
        self.currentReadingsLable.text     = [NSString stringWithFormat:@"%@ %@",accountItemModel.currentamount,accountItemModel.eunit];
    }
    else
    {
        self.currentReadingsAct.hidden = NO;
        [self requestMeterdataWithItemModel:accountItemModel];
    }
    
    if (accountItemModel.rechmodle == 1)
    {
        [self.rechargeButton setTitle:@"充值" forState:UIControlStateNormal];
        
        //判断剩余用量还是剩余金额 1.充用量   2.充金额
        if (accountItemModel.rechargestype == 1)
        {
            self.remainingAmountNameLable.text = @"剩余用量";
            self.surplusAmountLable.text = [NSString stringWithFormat:@"%@ %@",accountItemModel.amountforrecharges,accountItemModel.eunit];
        }
        else
        {
            self.remainingAmountNameLable.text = @"剩余金额";
            self.surplusAmountLable.text = [NSString stringWithFormat:@"%@ 元",accountItemModel.amountforrecharges];
        }
    }
    else
    {
        [self.rechargeButton setTitle:@"全部结账" forState:UIControlStateNormal];
        self.remainingAmountNameLable.text = @"累计未结金额";
        self.surplusAmountLable.text = [NSString stringWithFormat:@"%@ 元",accountItemModel.moneyofamount];
    }
}

#pragma mark - 网络请求
/**
 *  当户头列表未获取到当前示数时，再次请求当前示数获取
 */
- (void)requestMeterdataWithItemModel:(LQAccountItemModel *)itemModel
{
    YTKKeyValueStore *store      = [[YTKKeyValueStore alloc] initDBWithName:SQL_Name];
    NSDictionary *accountDic = [NSMutableDictionary dictionaryWithDictionary:[store getObjectById:SQL_Account_Key fromTable:SQL_Account_TableName]];
    NSString *sessionid  = [accountDic valueForKey:@"sessionid"];
    
    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
    NSString *urlStr = [NSString stringWithFormat:@"%@/energy/do/chargeapp/getmeterdata.do?;sessionid=%@;MeterId=%@",IP,sessionid,itemModel.meterid];
    
    [manager GET:urlStr parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject)
     {         
         LQMeterDataModel *meterDataModel = [LQMeterDataModel objectWithKeyValues:operation.responseString];
         
         if (meterDataModel.returns)
         {
             itemModel.currentamount = meterDataModel.currentamount;
             itemModel.surplusamount = meterDataModel.surplusamount;
             
         }
         else
         {
             itemModel.currentamount = @"--.--";
             itemModel.surplusamount = @"--.--";
         }
         
         self.accountItemModel = itemModel;
         
     } failure:^(AFHTTPRequestOperation *operation, NSError *error)
     {
         LQLog(@"%@",error);
         
         itemModel.currentamount = @"--.--";
         itemModel.surplusamount = @"--.--";
         
         self.accountItemModel = itemModel;
         
     }];
}

@end
