//
//  LQMonthAnalysisView.m
//  朝阳能源结算
//
//  Created by admin on 15/8/17.
//  Copyright (c) 2015年 dieshang. All rights reserved.
//

#import "LQMonthAnalysisView.h"
#import "LQCalendarView.h"
#import "LQChooseMonthBtnGroup.h"
#import "LQAccountItemModel.h"
#import "LQAnalyzeForMonthsUseItemModel.h"
#import "LQAnalyzeForMonthsUseModel.h"
#import "LQAccountItemModel.h"

@interface LQMonthAnalysisView()<LQChooseMonthBtnGroupDelegate>

@property (nonatomic, weak) LQCalendarView *calendar;
@property (nonatomic, weak) LQChooseMonthBtnGroup *chooseMonthBtnGroupView;
@property (nonatomic, copy) NSString *unit;
@property (nonatomic, strong) LQAccountItemModel *accountItemModel;
@property (nonatomic, weak  ) UIActivityIndicatorView *act;

@end

@implementation LQMonthAnalysisView

- (UIActivityIndicatorView *)act
{
    if (!_act)
    {
        UIActivityIndicatorView *act = [[UIActivityIndicatorView alloc] init];
        [act setActivityIndicatorViewStyle:UIActivityIndicatorViewStyleGray];
        [self addSubview:act];
        
        [act mas_makeConstraints:^(MASConstraintMaker *make) {
            make.center.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(30, 30));
        }];
        
        _act = act;
    }
    
    return _act;
}

- (LQChooseMonthBtnGroup *)chooseMonthBtnGroupView
{
    if (_chooseMonthBtnGroupView == nil)
    {
        LQChooseMonthBtnGroup *view = [LQChooseMonthBtnGroup chooseMonthBtnGroupWithFrame:CGRectZero];
        view.delegate = self;
        [self addSubview:view];
        
        [view mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.mas_top);
            make.left.equalTo(self.mas_left);
            make.right.equalTo(self.mas_right);
            make.height.equalTo(@40);
        }];
        
        _chooseMonthBtnGroupView = view;
    }
    
    return _chooseMonthBtnGroupView;
}

- (LQCalendarView *)calendar
{
    if (_calendar == nil)
    {
        LQCalendarView *calendar = [LQCalendarView calendarWithDays:-190 showType:CalendarShowTypeSingle singleShowMonth:0 frame:CGRectMake(10, 40, LQScreen_Width-20, 400) unit:self.accountItemModel.eunit monthrecvalue:0.0];
        calendar.isEnable = YES;
        calendar.calendarBlock = ^(RMCalendarModel *model) {
            if (model.ticketModel) {
                LQLog(@"%lu-%lu-%lu-票价%.1f",(unsigned long)model.year,(unsigned long)model.month,(unsigned long)model.day, model.ticketModel.ticketPrice);
            } else {
                LQLog(@"%lu-%lu-%lu",(unsigned long)model.year,(unsigned long)model.month,(unsigned long)model.day);
            }
        };
        
        [self addSubview:calendar];
        
        [calendar mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.chooseMonthBtnGroupView.mas_bottom).with.offset(0);
            make.bottom.equalTo(self.mas_bottom).with.offset(-5);
            make.left.equalTo(self.mas_left).with.offset(10);
            make.right.equalTo(self.mas_right).with.offset(-10);
        }];
        
        _calendar = calendar;
    }
    
    return _calendar;
}

+ (instancetype)monthAnalysisViewWithFrame:(CGRect)frame accountItemModel:(LQAccountItemModel *)accountItemModel
{
    return [[self alloc] initWithFrame:frame accountItemModel:accountItemModel];
}

- (instancetype)initWithFrame:(CGRect)frame accountItemModel:(LQAccountItemModel *)accountItemModel
{
    if (self = [super initWithFrame:frame])
    {
        self.accountItemModel = accountItemModel;
        self.chooseMonthBtnGroupView.hidden = NO;
        self.calendar.hidden = NO;
        
        //显示当月的数据
        NSDateComponents *date= [[NSDate date] YMDComponents];
        [self requestAnalyzeForMonthUseWithYear:[NSString stringWithFormat:@"%ld",date.year] month:[NSString stringWithFormat:@"%ld",date.month] SingleShowMonth:0];
    }
    
    return self;
}

#pragma mark - 网络请求
/*
 获取月用能分析
 */
- (void)requestAnalyzeForMonthUseWithYear:(NSString *)year month:(NSString *)month SingleShowMonth:(int)singleShowMonth
{
    [self.act startAnimating];
    
    YTKKeyValueStore *store  = [LQKeyValueStore shareInstance].keyValueStore;
    NSDictionary *accountDic = [NSMutableDictionary dictionaryWithDictionary:[store getObjectById:SQL_Account_Key fromTable:SQL_Account_TableName]];
    NSString *sessionid      = [accountDic valueForKey:@"sessionid"];
    
    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
    NSString *urlStr = [NSString stringWithFormat:@"%@analyzeformonthuse.do;sessionid=%@",[LQUrlString shareInstance].urlStr,sessionid];
    NSDictionary *parameters = @{@"Year":year,@"Month":month,@"AccountId":self.accountItemModel.accountid};
    
    [manager POST:urlStr parameters:parameters success:^(AFHTTPRequestOperation *operation, id responseObject)
     {
//         LQLog(@"MONTH----%@",operation.responseString);
         
         LQAnalyzeForMonthsUseModel *monthsModel = [LQAnalyzeForMonthsUseModel objectWithKeyValues:operation.responseString];
         
         if (monthsModel.returns)
         {
             NSMutableArray *array = [NSMutableArray array];
             for (LQAnalyzeForMonthsUseItemModel *itemModel in monthsModel.items)
             {
                 NSDate *data = [[NSDate date] dateFromString:itemModel.day];
                 
                 NSDateComponents *dayDC= [data YMDComponents];
                 NSMutableDictionary *dic = [NSMutableDictionary dictionary];
                 dic[@"year"] = [NSString stringWithFormat:@"%ld",dayDC.year];
                 dic[@"month"] = [NSString stringWithFormat:@"%ld",dayDC.month];
                 dic[@"day"] = [NSString stringWithFormat:@"%ld",dayDC.day];
                 dic[@"ticketCount"] = @(1);
                 dic[@"ticketPrice"] = @(itemModel.value);
                 [array addObject:dic];
             }
             
//             array = [NSMutableArray arrayWithArray:@[@{@"year":@"2015",@"month":@"10",@"day":@"1",@"ticketCount":@(1),@"ticketPrice":@"368"},@{@"year":@"2015",@"month":@"10",@"day":@"2",@"ticketCount":@(1),@"ticketPrice":@"38"},@{@"year":@"2015",@"month":@"10",@"day":@"3",@"ticketCount":@(1),@"ticketPrice":@"38"},@{@"year":@"2015",@"month":@"10",@"day":@"4",@"ticketCount":@(1),@"ticketPrice":@"338"},@{@"year":@"2015",@"month":@"10",@"day":@"5",@"ticketCount":@(1),@"ticketPrice":@"385"},@{@"year":@"2015",@"month":@"10",@"day":@"6",@"ticketCount":@(1),@"ticketPrice":@"328"},@{@"year":@"2015",@"month":@"10",@"day":@"7",@"ticketCount":@(1),@"ticketPrice":@"398"},@{@"year":@"2015",@"month":@"10",@"day":@"8",@"ticketCount":@(1),@"ticketPrice":@"38"},@{@"year":@"2015",@"month":@"10",@"day":@"9",@"ticketCount":@(1),@"ticketPrice":@"38"},@{@"year":@"2015",@"month":@"10",@"day":@"10",@"ticketCount":@(1),@"ticketPrice":@"378"},@{@"year":@"2015",@"month":@"10",@"day":@"11",@"ticketCount":@(1),@"ticketPrice":@"358"},@{@"year":@"2015",@"month":@"10",@"day":@"12",@"ticketCount":@(1),@"ticketPrice":@"328"},@{@"year":@"2015",@"month":@"10",@"day":@"13",@"ticketCount":@(1),@"ticketPrice":@"38"},@{@"year":@"2015",@"month":@"10",@"day":@"14",@"ticketCount":@(1),@"ticketPrice":@"38"},@{@"year":@"2015",@"month":@"10",@"day":@"15",@"ticketCount":@(1),@"ticketPrice":@"384"},@{@"year":@"2015",@"month":@"10",@"day":@"16",@"ticketCount":@(1),@"ticketPrice":@"738"},@{@"year":@"2015",@"month":@"10",@"day":@"17",@"ticketCount":@(1),@"ticketPrice":@"378"},@{@"year":@"2015",@"month":@"10",@"day":@"18",@"ticketCount":@(1),@"ticketPrice":@"388"}]];
             
             self.calendar.monthrecvalue = monthsModel.monthrecvalue;
             self.calendar.modelArr = [TicketModel objectArrayWithKeyValuesArray:array];
             [self.calendar changeSingleShowMonth:singleShowMonth];
         }
         else
         {
             if ([monthsModel.code isEqualToString:@"1006"])
             {
                 if ([self.delegate respondsToSelector:@selector(showAccountTimeOutAlterViewWithMonthAnalysisView:)])
                 {
                     [self.delegate showAccountTimeOutAlterViewWithMonthAnalysisView:self];
                 }
             }
             else
             {
                 if ([self.delegate respondsToSelector:@selector(showOtherRequestReturnFalseAlterViewWithMonthAnalysisView:message:)])
                 {
                     [self.delegate showOtherRequestReturnFalseAlterViewWithMonthAnalysisView:self message:monthsModel.info];
                 }
             }
         }
         
         [self.act stopAnimating];
         
     } failure:^(AFHTTPRequestOperation *operation, NSError *error)
     {
         LQLog(@"--------%@",error);
         
         [self.act stopAnimating];
         
         MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self animated:YES];
         hud.labelText = HTTPRequestErrer_Text;
         hud.mode = MBProgressHUDModeText;
         [hud hide:YES afterDelay:1.5];
     }];
}

#pragma mark - LQChooseMonthBtnGroupDelegate
- (void)chooseMonthBtnGroupDidClickBtnWithView:(LQChooseMonthBtnGroup *)view button:(UIButton *)btn
{
    NSInteger tag = btn.tag - 100;
    
    NSDateComponents *date= [[NSDate date] YMDComponents];
    NSInteger year = (date.month >= 6)?date.year:(date.year - 1);
    NSInteger months = (date.month >= 6)?(date.month - tag):(date.month-tag)+12;
    
    [self requestAnalyzeForMonthUseWithYear:[NSString stringWithFormat:@"%ld",year] month:[NSString stringWithFormat:@"%ld",months] SingleShowMonth:(int)btn.tag-100];
}

@end
