//
//  LQYearAnalysisView.m
//  朝阳能源结算
//
//  Created by admin on 15/8/14.
//  Copyright (c) 2015年 dieshang. All rights reserved.
//
//-------------------------------------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------
//-----------------------年用能分析总界面----------------------
//-------------------------------------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------

#import "LQYearAnalysisView.h"
#import "LQEveryYearUesView.h"
#import "LQChooseYearBtnGroup.h"
#import "LQAnalyzeForYearUseItemModel.h"
#import "LQAnalyzeForYearUseModel.h"
#import "UUChart.h"

@interface LQYearAnalysisView()<LQChooseYearBtnGroupDelegate,UUChartDataSource>

@property (nonatomic, weak  ) UIScrollView            *scrollview;
@property (nonatomic, copy  ) NSString                *accountid;
@property (nonatomic, copy  ) NSString                *sessionid;
@property (nonatomic, strong) NSMutableArray          *monthUseArray;
@property (nonatomic, strong) LQChooseYearBtnGroup    *btnGroupView;
@property (nonatomic, strong) UUChart                 *chartView;
@property (nonatomic, weak  ) UIActivityIndicatorView *act;
@property (nonatomic, copy  ) NSString                *unit;
@property (nonatomic, strong) LQEveryYearUesView      *everyYearUseView;

@end

@implementation LQYearAnalysisView

- (UIActivityIndicatorView *)act
{
    if (!_act)
    {
        UIActivityIndicatorView *act = [[UIActivityIndicatorView alloc] init];
        [act setActivityIndicatorViewStyle:UIActivityIndicatorViewStyleGray];
        [self addSubview:act];
        
        [act mas_makeConstraints:^(MASConstraintMaker *make) {
            make.center.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(30, 30));
        }];
        
        _act = act;
    }
    
    return _act;
}

- (NSMutableArray *)monthUseArray
{
    if (!_monthUseArray)
    {
        _monthUseArray = [NSMutableArray arrayWithObjects:@"0", @"0",@"0",@"0",@"0",@"0",@"0",@"0",@"0",@"0",@"0",@"0",nil];
    }
    
    return _monthUseArray;
}

- (UIScrollView *)scrollview
{
    if (_scrollview == nil)
    {
        UIScrollView *scrollview = [[UIScrollView alloc] init];
        scrollview.contentSize = CGSizeMake(LQScreen_Width,ChartView_Height+EveryYearUseView_Height+10);
        [self addSubview:scrollview];
        
        [scrollview mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.btnGroupView.mas_bottom).with.offset(3);
            make.left.bottom.and.right.equalTo(self);
        }];
        
        _scrollview = scrollview;
    }
    
    return _scrollview;
}

- (LQChooseYearBtnGroup *)btnGroupView
{
    if (!_btnGroupView)
    {
        self.btnGroupView = [LQChooseYearBtnGroup chooseYearBtnGroupWithFrame:CGRectMake(0, 0, LQScreen_Width, BtnGroupView_Height)];
        self.btnGroupView.delegate = self;
        [self addSubview:self.btnGroupView];
    }
    
    return _btnGroupView;
}

+ (instancetype)yearAnalysisViewWithFrame:(CGRect)frame accountid:(NSString *)accountid sessionid:(NSString *)sessionid unit:(NSString *)unit
{
    return [[self alloc] initWithFrame:frame accountid:accountid sessionid:sessionid unit:unit];
}

- (instancetype)initWithFrame:(CGRect)frame accountid:(NSString *)accountid sessionid:(NSString *)sessionid unit:(NSString *)unit
{
    if (self = [super initWithFrame:frame])
    {
        self.unit     = unit;
        self.accountid = accountid;
        self.sessionid = sessionid;
        
        [self doLoading];
        
        NSDateComponents *date= [[NSDate date] YMDComponents];

        [self requestAnalyzeForYearUseWithYear:date.year];
    }
    
    return self;
}

- (void)doLoading
{
    self.chartView = [[UUChart alloc]initwithUUChartDataFrame:CGRectMake(10,10, LQScreen_Width-20, 150)withSource:self withStyle:UUChartBarStyle eunit:self.unit];
    [self.chartView showInView:self.scrollview];
    
    self.everyYearUseView = [LQEveryYearUesView everyYearUesViewWithFrame:CGRectMake(0, CGRectGetMaxY(self.chartView.frame)+20, LQScreen_Width, EveryYearUseView_Height) eunit:self.unit];
    [self.scrollview addSubview:self.everyYearUseView];
    self.everyYearUseView.monthUseArray = self.monthUseArray;
}

#pragma mark - 网络请求
- (void)requestAnalyzeForYearUseWithYear:(NSInteger)year
{
    [self.act startAnimating];
    
    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
    NSString *urlStr = [NSString stringWithFormat:@"%@/energy/do/chargeapp/analyzeforyearuse.do?;sessionid=%@",IP,self.sessionid];
    NSDictionary *parameters = @{@"AccountId":self.accountid,@"Year":@(year)};
    
    [manager POST:urlStr parameters:parameters success:^(AFHTTPRequestOperation *operation, id responseObject)
     {
//         LQLog(@"YEAR----%@",operation.responseString);
         
         LQAnalyzeForYearUseModel *useModel = [LQAnalyzeForYearUseModel objectWithKeyValues:operation.responseString];
         
         if (useModel.returns)
         {
             [self.monthUseArray removeAllObjects];
             
             //判断返回的数据添加到数组对应的位置，没有数据的月份添加“0”
             for (int i = 0; i < 12; i++)
             {
                 if ([useModel.items count] == 0)
                 {
                     [self.monthUseArray addObject:@"0"];
                 }
                 else
                 {
                     for (int j = 0; j < [useModel.items count]; j++)
                     {
                         LQAnalyzeForYearUseItemModel *item = useModel.items[j];
                         
                         if (i == item.recmonth-1)
                         {
                             [self.monthUseArray addObject:item.recvalues];
                             break;
                         }
                         else if (j == [useModel.items count]-1)
                         {
                             [self.monthUseArray addObject:@"0"];
                             break;
                         }
                     }
                 }
             }
             
             //刷新图表
             [self.chartView strokeChart];
             
             //刷新表格
             self.everyYearUseView.monthUseArray = self.monthUseArray;
             
             [self.act stopAnimating];
         }
         else
         {
             if ([useModel.code isEqualToString:@"1006"])
             {
                 if ([self.delegate respondsToSelector:@selector(showAccountTimeOutAlterViewWithYearAnalysisView:)])
                 {
                     [self.delegate showAccountTimeOutAlterViewWithYearAnalysisView:self];
                 }
             }
             else
             {
                 if ([self.delegate respondsToSelector:@selector(showOtherRequestReturnFalseAlterViewWithYearAnalysisView:message:)])
                 {
                     [self.delegate showOtherRequestReturnFalseAlterViewWithYearAnalysisView:self message:useModel.info];
                 }
             }
         }
         
     } failure:^(AFHTTPRequestOperation *operation, NSError *error)
     {
         LQLog(@"%@",error);
         
         [self.act stopAnimating];
         
         MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self animated:YES];
         hud.labelText = HTTPRequestErrer_Text;
         hud.mode = MBProgressHUDModeText;
         [hud hide:YES afterDelay:1.5];
     }];
}

#pragma mark - UUChartDataSource
//横坐标标题数组
- (NSArray *)UUChart_xLableArray:(UUChart *)chart
{
    NSMutableArray *xTitles = [NSMutableArray array];
    for (int i=0; i<12; i++)
    {
        NSString * str = [NSString stringWithFormat:@"%d",i+1];
        
        [xTitles addObject:str];
    }
    
    return xTitles;
}

//图标现实的数据数组
- (NSArray *)UUChart_yValueArray:(UUChart *)chart
{
    return @[self.monthUseArray];
}

//判断是否显示横线条
- (BOOL)UUChart:(UUChart *)chart ShowHorizonLineAtIndex:(NSInteger)index
{
    return YES;
}
//图像显示的数组
- (NSArray *)UUChart_ColorArray:(UUChart *)chart
{
    return @[RGB(158, 170, 215)];
}

#pragma mark - LQChooseYearBtnGroupDelegate
//年份按钮组的delegate回掉方法
- (void)chooseYearBtnGroupDidClickBtnWithView:(LQChooseYearBtnGroup *)view button:(UIButton *)btn
{
    //获取所点按钮对应的年份
    NSDateComponents *date= [[NSDate date] YMDComponents];
    NSInteger year = date.year - btn.tag;
    
    [self requestAnalyzeForYearUseWithYear:year];
}

@end
